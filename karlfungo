# MRO - Method Resolution Order
class A:
    def my_family(self):
        print("yes i am the oldest")

class B(A):      
    def my_family(self):
        print("yes i am the father")

class C(A):
    def  my_family(self):
        print("yes iam the youngest")

class D(B,C):
    pass 

d = D()
d.my_family()
----------------------------------------------------------------------------------------------------   
# this is INHERITANCE
----------------------------------------------------------------------------------------------------  
class Parent:
    def __init__(self, fname , fage):
        self.name = fname
        self.age = fage
     

    def view(self):
        print(self.name, self.age,)
   
class Child(Parent):
    def __init__(self, fname , fage):
        Parent.__init__(self, fname,fage)
        self.lastname = "fungo"
        
    def view(self):
        print(self.age, self.lastname , self.name)

ob = Child('karl' , 19)
ob.view()
       
  ----------------------------------------------------------------------------------------------------     
 #Another Example of single inheritance
 ------------------------------------------------------------------------------------------------------
 class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
    
  def myfunc(abc):
    print("Hey I'ts me " + abc.name)

      
p1 = Person("Karl", 19)
p1.myfunc()
------------------------------------------------------------------------------------------------------------------------
# Practicing multiple Inheritance
-------------------------------------------------------------------------------------------------------------------------
class Go:
    def energy(self):
        print("This is for gainning energy")

class Glow:
    def muscle(self):
        print("This is for muscle")

class Grow:
    def healthy(self):
        print("This is for body healthy")

class Bread(Go):
    pass

class Egg(Grow):
    pass

class Apple(Glow):
    pass

class Peanut(Grow):
    pass

class Orange(Glow):
    pass

class Rice(Go):
    pass

bread = Bread()    
egg = Egg()   
apple = Apple()
peanut = Peanut()
orange = Orange()
rice = Rice()

#bread.energy()
#gg.healthy()
#apple.muscle()
#peanut.healthy()
#orange.muscle()
#rice.energy()

# This is my phyton list

nbaplayerlist = ["James", "Curry", "Bryant", "Fungo", "Durant"]
print(nbaplayerlist)
print("\n")
print("==============================")
print("\n")

#Output 
#["James", "Curry", "Bryant", "Fungo", "Durant"]

# checking the lenght of my list

pbaplayerlist = ["Lapid", "Castro", "Aguilar", "Fungo", "Thompson"]
print(len(pbaplayerlist))
print("\n")
print("==============================")
print("\n")

# the output will be 5

# This is Range index in phyton list

my_list = ["pogs", "text", "jollens", "piko", "tumbang preso", "sikyo", "taguan"]
print(my_list[3:5])
print("\n")
print("$$$$$$$$$$$$$$$$$$$$$$$$")
print("\n")

#output
#['piko', 'tumbang preso']

# This is Range Negative indexing in phyton list

my_list = ["pogs", "text", "jollens", "piko", "tumbang preso", "sikyo", "taguan"]
print(my_list[-2:-4])
print("\n")
print("$$$$$$$$$$$$$$$$$$$$$$$$")
print("\n")

#output
#[ ]


# Tuple 
my_tuple = ("duralite", "havainas", "addidas", "nike", "ari joraon")
print(my_tuple)
print("\n")
# output
# ('duralite', 'havainas', 'addidas', 'nike', 'ari joraon')

# Tuple with one item

mytuple = ("Karl",)
print(type(mytuple))

# output 
# class tuple
# it become a class tuple because of add comma after the object

mytuple = ("Michael")
print(type(mytuple))

# the possible output of this code is error
# because i forgot the comma after the object

# Tuple constructor
karltuple = tuple(("ikaw", "lang", "sapat", "na"))
print(karltuple)


# note the double round-brackets




 
 
